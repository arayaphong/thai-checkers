// Catch2
#include <catch2/catch_test_macros.hpp>

#include <cstddef>
#include <vector>
#include <unordered_set>

#include "Game.h"

TEST_CASE("Game plays to completion with first-move selector", "[selector][determinism]") {
    Game game;
    while (game.move_count() != 0) { game.select_move(0); }
    const auto& move_sequence = game.get_move_sequence();
    const std::vector<std::size_t> expected = {
        18374687574904995840ull, 18307133580494438400ull, 18307134611286589440ull, 18302912486635929600ull,
        18302912551060439040ull, 18302648668269772800ull, 18302650729854074880ull, 18302632175594307584ull,
        18302633129069707264ull, 18167525140248592384ull, 18167529263417196544ull, 18158803539139166208ull,
        18158803796837203968ull, 18158539914046537728ull, 18158548160383746048ull, 18158529606124765184ull,
        18158530121520971776ull, 18158529988377051137ull, 18158531019169202177ull, 18158599184588931104ull,
        18159087367751663616ull, 17888871390109433856ull, 18158524417798242304ull, 13294636820237058048ull,
        13294638744382406656ull, 13259735847270285312ull, 13259739695560982528ull, 13258684164398317568ull,
        13259737496537726976ull, 12719305541253267456ull, 13258611596630884352ull, 12177747686062489600ull,
        12177764178736906240ull, 12110210184326348800ull, 12110276155024015360ull, 12106054030373355520ull,
        12114762162464817152ull, 9880976747289575424ull,  10952833458603229192ull, 2017691797900951568ull,
        2017823739296284688ull,  1747607761654054928ull,  1748100342863298576ull,  1729558178771632136ull,
        1730543341190119432ull,  1730509256329658376ull,  1747397754932297736ull,  1747396724140146696ull,
        1873497513706520584ull,  1873497449282011145ull,  4035225270419849229ull,  4035225334844358669ull,
        12682136619395710991ull, 12682136554971201551ull, 11529215084724092943ull, 11529215149148536847ull,
        11529215664544677903ull, 11529215600120168463ull, 11529215067544223759ull, 11529215131968667663ull,
        11529215389666770959ull, 11529215325242261519ull, 11529215058954289167ull, 11529215123378733071ull,
        11529215252227817487ull, 11529215187803308047ull, 11529215058954289167ull};
    REQUIRE(move_sequence == expected);
}

TEST_CASE("Game plays to completion with last-move selector", "[selector][determinism]") {
    Game game;
    while (game.move_count() != 0) { game.select_move(game.move_count() - 1); }
    const auto& move_sequence = game.get_move_sequence();
    const std::vector<std::size_t> expected = {
        18374687574904995840ull, 17834255619620536320ull, 17834263865957744640ull, 9187352581406392320ull,
        9187484522801725440ull,  8917268545159495680ull,  8919379607484825600ull,  4595923965209149440ull,
        4595928088377753600ull,  4460820099556638720ull,  4460956438998482944ull,  2299228617860644864ull,
        2300213780279132160ull,  2263129452093308928ull,  2296906449323753472ull,  1685542799874654208ull,
        1685544861458956288ull,  1685472431128379392ull,  1685473384611119104ull,  1433271805478371328ull,
        1433305890338832384ull,  1365751895928274944ull,  1366279661509607424ull,  1347737497417744384ull,
        1347738528209895424ull,  1347702313045131264ull,  1347702828441468928ull,  266838917872549888ull,
        266847164209758208ull,   140746374643384320ull,   140878316038717440ull,   139620474736017408ull,
        139621007312093184ull,   139611678642864130ull,   139611811787046913ull,   105834814581768193ull,
        105836876166070273ull,   105869844334772226ull};
    REQUIRE(move_sequence == expected);
}

TEST_CASE("Game plays to completion with middle-move selector", "[selector][determinism]") {
    Game game;
    while (true) {
        const auto mc = game.move_count();
        if (mc == 0) break;
        game.select_move(mc / 2);
    }
    const auto& move_sequence = game.get_move_sequence();
    const std::vector<std::size_t> expected = {
        18374687574904995840ull, 18248586785338621952ull, 18248588709483970560ull, 17996387130351222784ull,
        17996390978641920000ull, 17933340583858733056ull, 17933341545931407360ull, 16852477635362488320ull,
        16852494128036904960ull, 16818717130831626240ull, 16818718161623777280ull, 16751164167213219840ull,
        16751164682609295360ull, 16210732727324835840ull, 16210766812185296896ull, 16175863915073175552ull,
        16175932084794097664ull, 16174738015165284352ull, 16174746261503016960ull, 16157857762900377600ull,
        16157923733598044160ull, 16149479484296724480ull, 16157853364912586752ull, 13924067949736820736ull,
        14995924661050999808ull, 14991702536400339968ull, 14995889476657938944ull, 14993778414332609024ull,
        15061332408743166464ull, 10593761578425189376ull, 10593761836123227136ull, 10593759379358155268ull,
        10593759645646258690ull, 10593761552589717762ull, 10594025435380908290ull, 12827527176536653920ull,
        11674610069974483010ull, 11674465209317392416ull, 11674465342461378592ull, 11548364552895004704ull,
        11548366614479372320ull, 9247027204893048848ull,  9247095374613970960ull,  9245901304986075144ull,
        9246033246381408264ull,  9313587240791965712ull,  9315698303117295632ull,  9243711077823807492ull,
        9277488075029610500ull,  9817849661568843784ull};
    REQUIRE(move_sequence == expected);
}

TEST_CASE("Game plays to completion with alternating selector", "[selector][determinism]") {
    Game game;
    int state = 0;
    while (true) {
        const auto mc = game.move_count();
        if (mc == 0) break;
        const auto select_index = (state % 2 == 0) ? mc - 1 : 0;
        game.select_move(select_index);
        ++state;
    }
    const auto& move_sequence = game.get_move_sequence();
    const std::vector<std::size_t> expected = {
        18374687574904995840ull, 17834255619620536320ull, 17834256650412687360ull, 9187345365861335040ull,
        9187345430285844480ull,  8917129452643614720ull,  8917131514227916800ull,  4593675871952240640ull,
        4593676000801259520ull,  4458568011980144640ull,  4458572135148748800ull,  2296844314010910720ull,
        2296844571708948480ull,  2229290577298391040ull,  2229298823635599360ull,  1148434913066680320ull,
        1148435428462755840ull,  1114658431257477120ull,  1114674923931893760ull,  574242968647434240ull,
        574243999439585280ull,   539341102327463936ull,   539375187187924992ull,   287173608055177216ull,
        287174570127851520ull,   269723121571790848ull,   2430852808912609280ull,  2422408559611289600ull,
        115580387450617984ull,   52529992667431040ull,    52564077527892096ull,    51967042713747584ull,
        52000028062580864ull,    17097130950459520ull,    33844892123464704ull,    25400642822145024ull,
        25402566967624704ull,    21180442316964864ull,    29888574387978752ull,    27777512062648832ull,
        29884176318398720ull,    29391595109155072ull,    30444927233884288ull,    30443965161275520ull,
        30447813451972736ull,    30447684602953857ull,    30513655300620417ull,    30654384198582408ull,
        30900674803466372ull,    30764335361818753ull,    30896276757151873ull,    301037487594078240ull,
        305259612244738080ull,   9240401272947802144ull,  9257289771550441504ull,  78953730967797768ull,
        2308235546516193284ull};
    REQUIRE(move_sequence == expected);
}
